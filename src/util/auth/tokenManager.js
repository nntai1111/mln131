import { jwtDecode } from "jwt-decode";

/**
 * Ki·ªÉm tra xem token c√≥ h·∫øt h·∫°n hay kh√¥ng
 * @param {string} token - JWT token
 * @returns {boolean} - true n·∫øu token h·∫øt h·∫°n, false n·∫øu c√≤n h·∫°n
 */
export const isTokenExpired = (token) => {
  if (!token) {
    console.log("üîç Token kh√¥ng t·ªìn t·∫°i");
    return true;
  }

  try {
    const decodedToken = jwtDecode(token);
    const currentTime = Date.now() / 1000; // Chuy·ªÉn ƒë·ªïi sang gi√¢y

    console.log("üîç Th√¥ng tin token:", {
      exp: decodedToken.exp,
      currentTime,
      expired: decodedToken.exp && decodedToken.exp < currentTime,
    });

    // Ki·ªÉm tra n·∫øu token c√≥ exp field v√† so s√°nh v·ªõi th·ªùi gian hi·ªán t·∫°i
    if (decodedToken.exp && decodedToken.exp < currentTime) {
      console.log("‚ö†Ô∏è Token ƒë√£ h·∫øt h·∫°n!");
      return true;
    }

    console.log("‚úÖ Token c√≤n hi·ªáu l·ª±c");
    return false;
  } catch (error) {
    console.error("‚ùå L·ªói khi decode token:", error);
    return true; // N·∫øu c√≥ l·ªói th√¨ coi nh∆∞ token h·∫øt h·∫°n
  }
};

/**
 * L·∫•y th·ªùi gian c√≤n l·∫°i c·ªßa token (t√≠nh b·∫±ng milliseconds)
 * @param {string} token - JWT token
 * @returns {number} - Th·ªùi gian c√≤n l·∫°i t√≠nh b·∫±ng milliseconds, 0 n·∫øu h·∫øt h·∫°n
 */
export const getTokenTimeRemaining = (token) => {
  if (!token) return 0;

  try {
    const decodedToken = jwtDecode(token);
    const currentTime = Date.now() / 1000;

    if (decodedToken.exp) {
      const timeRemaining = (decodedToken.exp - currentTime) * 1000;
      return timeRemaining > 0 ? timeRemaining : 0;
    }

    return 0;
  } catch (error) {
    console.error("L·ªói khi decode token:", error);
    return 0;
  }
};

/**
 * L·∫•y th√¥ng tin t·ª´ token
 * @param {string} token - JWT token
 * @returns {object|null} - Th√¥ng tin decode t·ª´ token ho·∫∑c null n·∫øu c√≥ l·ªói
 */
export const getTokenInfo = (token) => {
  if (!token) return null;

  try {
    return jwtDecode(token);
  } catch (error) {
    console.error("L·ªói khi decode token:", error);
    return null;
  }
};
